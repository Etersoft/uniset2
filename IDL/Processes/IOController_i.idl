/*
 * Copyright (c) 2015 Pavel Vainerman.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 2.1.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
// --------------------------------------------------------------------------
/*! \file
 *  \author Pavel Vainerman
*/
// --------------------------------------------------------------------------
#ifndef BaseIOController_i_IDL_
#define BaseIOController_i_IDL_
// --------------------------------------------------------------------------
#include "../UniSetTypes/UniSetTypes_i.idl"
#include "../UniSetTypes/UniSetManager_i.idl"
// --------------------------------------------------------------------------------------------------------------

/*! 
 * \interface IOController_i 
 * \brief Базовый интерфейс для создания координаторов ввода/вывода  
 *
*/ 
interface IOController_i : UniSetManager_i
{
    // исключения

    /*! Датчик не найден */
    exception NameNotFound
    {
        string err;
    };

    exception IOBadParam
    {
        string err;
    };

    /*! Значение не определено
        (например: обрыв датчика)
    */
    exception Undefined
    {
        long value; // текущее значение (может быть специальным undefined_value)
    };

    /*! Информация о датчике */
    struct SensorInfo
    {
        uniset::ObjectId id;    /*!< идентификатор датчика */
        uniset::ObjectId node;  /*!< узел на котором он находится */
    };

    long getValue(in uniset::ObjectId sid) raises(NameNotFound,Undefined);
    void setValue(in uniset::ObjectId sid, in long value,
                    in uniset::ObjectId sup_id) raises(NameNotFound,Undefined);

    // установка неопределённого состояния
    // (пока работает только для аналоговых датчиков)
    void setUndefinedState(in uniset::ObjectId sid, in boolean undefined, in uniset::ObjectId sup_id )
                            raises(NameNotFound);

    // "заморозка"/"разморозка" значения. set=true - выставить value и не менять, пока не будет вызван set=false
    void freezeValue(in uniset::ObjectId sid, in boolean set, in long value, in uniset::ObjectId sup_id ) raises(NameNotFound);

    UniversalIO::IOType getIOType(in uniset::ObjectId sid) raises(NameNotFound);

    // --- Интерфейс для конфигурирования ---

    /*! Получение неколиброванного значения */
    long getRawValue( in uniset::ObjectId sid ) raises(NameNotFound);

    struct CalibrateInfo
    {
        long minRaw;      /*!< минимальное "сырое" значение */
        long maxRaw;      /*!< максимальное "сырое" значение */
        long minCal;      /*!< минимальное калиброванное значение */
        long maxCal;      /*!< максимальное калиброванное значение */
        short precision;  /*!< точность */
    };

    void calibrate( in uniset::ObjectId sid, in CalibrateInfo ci, in uniset::ObjectId adminId ) raises(NameNotFound);
    CalibrateInfo getCalibrateInfo( in uniset::ObjectId sid ) raises(NameNotFound);

    // --- Интерфейс получения информации о всех датчиках ---
    /*! Информация датчике */
    struct SensorIOInfo
    {
        long value;                   /*!< значение */
        boolean undefined;            /*!< признак неопределённости значения */
        boolean blocked;              /*!< данное значение блокировано другим */
        boolean frozen;               /*!< данное значение "заморожено" */
        long real_value;              /*!< запомненное состояние, до блокировки или заморозки */
        UniversalIO::IOType type;     /*!< тип */
        long priority;                /*!< приоритет уведомления */
        IOController_i::SensorInfo si;
        long default_val;             /*!< значение по умолчанию */
        CalibrateInfo ci;             /*!< калибровочные параметры */
        unsigned long tv_sec;         /*!< время последнего изменения датчика, секунды (clock_gettime(CLOCK_REALTIME) */
        unsigned long tv_nsec;        /*!< время последнего изменения датчика, nanosec (clock_gettime(CLOCK_REALTIME) */
        uniset::ObjectId supplier;    /*!< идентификатор объекта изменившего состояние датчика */
        boolean dbignore;             /*!< не сохранять изменения в БД */
        uniset::ObjectId depend_sid;  /*!< датчик от которого зависит данный (при blocked=true). DefaultObjectId если не зависит */
    };

    typedef sequence<SensorIOInfo> SensorInfoSeq;

    SensorInfoSeq getSensorsMap();
    SensorIOInfo getSensorIOInfo( in uniset::ObjectId sid ) raises(NameNotFound);

    // -- Функции работы со списком датчиков --

    /*! Получение состояния датчиков. */
    SensorInfoSeq getSensorSeq( in uniset::IDSeq lst );

    /*! Информация о "выходе" */
    struct OutInfo
    {
        SensorInfo si;    /*!< идентификатор выхода */
        long value;       /*!< значение */
    };

    typedef sequence<OutInfo> OutSeq;

    /*!
        Выставить состояние группы датчиков/выходов (дискретных или аналоговых).
        \return Возвращает список входов/выходов изменить состояние которых не удалось.
            Будет пустым если всё хорошо.
    */
    uniset::IDSeq setOutputSeq( in OutSeq lst, in uniset::ObjectId sup_id );


    /*! Информация о датчике */
    struct ShortIOInfo
    {
        long value;

        // могут быть проблемы в 64bit-ных
        unsigned long tv_sec;    /*!< время последнего изменения датчика, секунды (clock_gettime(CLOCK_REALTIME) */
        unsigned long tv_nsec;   /*!< время последнего изменения датчика, nanosec (clock_gettime(CLOCK_REALTIME) */
        uniset::ObjectId supplier; /*!< идентификатор того, кто менял датчик (последний раз) */
    };

    ShortIOInfo getTimeChange( in uniset::ObjectId sid ) raises(NameNotFound);


    /*! Информация о дискретном датчике */
    struct ShortMap
    {
        UniversalIO::IOType type;
        long value;
        long id;
    };

    typedef sequence<ShortMap> ShortMapSeq;

    ShortMapSeq getSensors();
};

// --------------------------------------------------------------------------------------------------------------
/*!
 * \interface IONotifyController_i
 * \brief Базовый интерфейс для создания процессов рассылающих сообщения об изменении состояния
 * \author Pavel Vainerman
 * \version
 * \date   September 2001-
 *
 * ... а здесь идет кратенькое описание...
*/
interface IONotifyController_i : IOController_i
{
    /*! Неверно указаны пределы */
    exception BadRange
    {
    };

    /*! Универсальная функция заказа уведомления об изменении датчика.
     * \sa UniversalIO::UniversalIOController::askSensor()
    */
    void askSensor(in uniset::ObjectId sid, in uniset::ConsumerInfo ci, in UniversalIO::UIOCommand cmd ) raises(NameNotFound,IOBadParam);

    /*!
        Заказ сразу списка объектов.
        \return Возвращает список объектов заказ по котором не прошёл.
            Будет пустым если всё хорошо.
    */
    uniset::IDSeq askSensorsSeq( in uniset::IDSeq lst,
                                        in uniset::ConsumerInfo ci,
                                        in UniversalIO::UIOCommand cmd );


    /*! Состояние порогового датчика */
    enum ThresholdState
    {
        LowThreshold,       /*!< сработал нижний порог  (значение меньше нижнего) */
        NormalThreshold,    /*!< значение в заданных пределах (не достигли порога) */
        HiThreshold         /*!< сработал верхний порог  (значение больше верхнего) */
    };

    struct ThresholdInfo
    {
        uniset::ThresholdId id;
        long hilimit;         /*!< верхняя граница срабатывания */
        long lowlimit;        /*!< нижняя граница срабатывания */
        ThresholdState state;
        unsigned long tv_sec;    /*!< время последнего изменения датчика, секунды (clock_gettime(CLOCK_REALTIME) */
        unsigned long tv_nsec;   /*!< время последнего изменения датчика, nanosec (clock_gettime(CLOCK_REALTIME) */
        boolean invert;       /*!< инвертированная логика */
    };

    typedef sequence<ThresholdInfo> ThresholdInfoSeq;

    /*! Заказ порогового датчика
     * \sa UniversalIO::UniversalIOController::askThreshold()
     * \param tid - идентификатор порога
     * \param lowLimit - нижний порог срабатывания
     * \param hiLimit - верхний порог срабатывания
     * \param invert - инвертировать логику срабатывания
     * Если invert=false, порог срабатывает при условии >= hilimit и отпускается при <= lowlimit
     * Если invert=true, порог срабатывает при условии <= lowlimit и отпускается при <= hilimit
    */
    void askThreshold(in uniset::ObjectId sid, in uniset::ConsumerInfo ci, in uniset::ThresholdId tid,
                        in long lowLimit, in long hiLimit, in boolean invert,
                        in UniversalIO::UIOCommand cmd ) raises(NameNotFound, IOBadParam, BadRange);


    /*! Получение информации о пороге
     *  Т.к. пороги могут иметь одинаковый tid для разных аналоговых датчиков, то передаётся и SensorInfo
    */
    ThresholdInfo getThresholdInfo( in uniset::ObjectId sid, in uniset::ThresholdId tid ) raises(NameNotFound);

    struct ThresholdList
    {
        IOController_i::SensorInfo si;
        UniversalIO::IOType type;
        long value;
        ThresholdInfoSeq tlist;
    };

    typedef sequence<ThresholdList> ThresholdsListSeq;

    /*! получить список порогов для датчика "si" */
    ThresholdList getThresholds( in uniset::ObjectId sid ) raises(NameNotFound);

    /*! получить список ВСЕХ датчиков по которым созданы пороги */
    ThresholdsListSeq getThresholdsList();
};
// --------------------------------------------------------------------------
#endif
