/*
 * Copyright (c) 2015 Pavel Vainerman.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 2.1.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
// --------------------------------------------------------------------------
/*! \file
 *  \author Pavel Vainerman
*/
// --------------------------------------------------------------------------
#ifndef UniSetTypes_i_IDL_
#define UniSetTypes_i_IDL_
// --------------------------------------------------------------------------
#include "UniSetBaseConstants.idl"
// --------------------------------------------------------------------------
//module UniSet
//{
    module uniset
    {
        typedef long ObjectId;          /*!< идентификатор объекта */
        typedef long ThresholdId;       /*!< идентификатор порога */
        typedef long TimerId;           /*!< идентификатор таймера */
        typedef string<SizeOfObjectType> ObjectType;  /*!< тип объекта */

        typedef octet ByteOfMessage;        /*!< тип для одного байта сообщения */
        typedef ByteOfMessage RawDataOfTransportMessage[SizeOfTransportMessage];    /*!< данные в сообщении */

        /*!
         * Структура пакета предназначенного для пересылки по сети
         * \par
         * Сообщения любого типа должны непосредственно перед отправкой приводится к этому типу.
         * Все функции занимающиеся фактической пересылкой сообщений должны работать с этим типом сообщения.
        */
        struct TransportMessage
        {
            RawDataOfTransportMessage data;
            ObjectId consumer;
        };


        /*!
         * Информация об узле
        */
        struct NodeInfo
        {
            ObjectId id;
            boolean connected;
            ObjectId dbserver;
            string<30> host;
            string<10> port;
        };

        /*! информация об объекте */
        struct SimpleInfo
        {
            ObjectId id;
            string info;
        };

        typedef sequence<SimpleInfo> SimpleInfoSeq;


        /*! Информация о заказчике */
        struct ConsumerInfo
        {
            ObjectId id;    /*!< идентификатор заказчика */
            ObjectId node;  /*!< узел, на котором он находится */
        };


        /*! Список идентификаторов */
        typedef sequence<ObjectId> IDSeq;


    };// end of module uniset


    module UniversalIO
    {
        /*!
         * Типы входов/выходов
        */
        enum IOType
        {
            UnknownIOType,
            DI, // DigitalInput
            DO, // DigitalOutput
            AI, // AnalogInput
            AO  // AnalogOutput
        };

         /*! Разрешенные команды для всех контроллеров ввода/вывода */
         enum UIOCommand
         {
             UIONotify,            /*!< заказать получение информации */
             UIODontNotify,        /*!< отказаться от получения информации */
             UIONotifyChange,      /*!< заказ информации, только после изменения (без первого уведомления о текущем состоянии) */
             UIONotifyFirstNotNull /*!< заказ информации. Первое уведомление, только если датчик не "0" */
         };

    };    // end of module UniversalIO

//};    // end of module UniSet
// --------------------------------------------------------------------------------------------------------------
#endif // of UniSetTypes_i_IDL
