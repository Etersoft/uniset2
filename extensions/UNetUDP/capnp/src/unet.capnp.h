// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: unet.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp
{
    namespace schemas
    {

        CAPNP_DECLARE_SCHEMA(b97d6d8ce9d324c4);
        CAPNP_DECLARE_SCHEMA(d0a555d15dd9291e);
        CAPNP_DECLARE_SCHEMA(a34734de9c373622);

    }  // namespace schemas
}  // namespace capnp

namespace uniset
{

    struct UNetPacket
    {
        UNetPacket() = delete;

        class Reader;
        class Builder;
        class Pipeline;
        struct DData;
        struct AData;

        struct _capnpPrivate
        {
            CAPNP_DECLARE_STRUCT_HEADER(b97d6d8ce9d324c4, 6, 2)
#if !CAPNP_LITE
            static constexpr ::capnp::_::RawBrandedSchema const* brand()
            {
                return &schema->defaultBrand;
            }
#endif  // !CAPNP_LITE
        };
    };

    struct UNetPacket::DData
    {
        DData() = delete;

        class Reader;
        class Builder;
        class Pipeline;

        struct _capnpPrivate
        {
            CAPNP_DECLARE_STRUCT_HEADER(d0a555d15dd9291e, 2, 0)
#if !CAPNP_LITE
            static constexpr ::capnp::_::RawBrandedSchema const* brand()
            {
                return &schema->defaultBrand;
            }
#endif  // !CAPNP_LITE
        };
    };

    struct UNetPacket::AData
    {
        AData() = delete;

        class Reader;
        class Builder;
        class Pipeline;

        struct _capnpPrivate
        {
            CAPNP_DECLARE_STRUCT_HEADER(a34734de9c373622, 2, 0)
#if !CAPNP_LITE
            static constexpr ::capnp::_::RawBrandedSchema const* brand()
            {
                return &schema->defaultBrand;
            }
#endif  // !CAPNP_LITE
        };
    };

    // =======================================================================================

    class UNetPacket::Reader
    {
        public:
            typedef UNetPacket Reads;

            Reader() = default;
            inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

            inline ::capnp::MessageSize totalSize() const
            {
                return _reader.totalSize().asPublic();
            }

#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
            }
#endif  // !CAPNP_LITE

            inline  ::uint32_t getMagic() const;

            inline  ::uint64_t getNum() const;

            inline  ::int64_t getNodeID() const;

            inline  ::int64_t getProcID() const;

            inline bool hasDdata() const;
            inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Reader getDdata() const;

            inline  ::uint64_t getDnum() const;

            inline bool hasAdata() const;
            inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Reader getAdata() const;

            inline  ::uint64_t getAnum() const;

        private:
            ::capnp::_::StructReader _reader;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::List;
            friend class ::capnp::MessageBuilder;
            friend class ::capnp::Orphanage;
    };

    class UNetPacket::Builder
    {
        public:
            typedef UNetPacket Builds;

            Builder() = delete;  // Deleted to discourage incorrect usage.
            // You can explicitly initialize to nullptr instead.
            inline Builder(decltype(nullptr)) {}
            inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
            inline operator Reader() const
            {
                return Reader(_builder.asReader());
            }
            inline Reader asReader() const
            {
                return *this;
            }

            inline ::capnp::MessageSize totalSize() const
            {
                return asReader().totalSize();
            }
#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return asReader().toString();
            }
#endif  // !CAPNP_LITE

            inline  ::uint32_t getMagic();
            inline void setMagic( ::uint32_t value);

            inline  ::uint64_t getNum();
            inline void setNum( ::uint64_t value);

            inline  ::int64_t getNodeID();
            inline void setNodeID( ::int64_t value);

            inline  ::int64_t getProcID();
            inline void setProcID( ::int64_t value);

            inline bool hasDdata();
            inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Builder getDdata();
            inline void setDdata( ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Reader value);
            inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Builder initDdata(unsigned int size);
            inline void adoptDdata(::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>&& value);
            inline ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>> disownDdata();

            inline  ::uint64_t getDnum();
            inline void setDnum( ::uint64_t value);

            inline bool hasAdata();
            inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Builder getAdata();
            inline void setAdata( ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Reader value);
            inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Builder initAdata(unsigned int size);
            inline void adoptAdata(::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>&& value);
            inline ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>> disownAdata();

            inline  ::uint64_t getAnum();
            inline void setAnum( ::uint64_t value);

        private:
            ::capnp::_::StructBuilder _builder;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            friend class ::capnp::Orphanage;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
    };

#if !CAPNP_LITE
    class UNetPacket::Pipeline
    {
        public:
            typedef UNetPacket Pipelines;

            inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
            inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
                : _typeless(kj::mv(typeless)) {}

        private:
            ::capnp::AnyPointer::Pipeline _typeless;
            friend class ::capnp::PipelineHook;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
    };
#endif  // !CAPNP_LITE

    class UNetPacket::DData::Reader
    {
        public:
            typedef DData Reads;

            Reader() = default;
            inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

            inline ::capnp::MessageSize totalSize() const
            {
                return _reader.totalSize().asPublic();
            }

#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
            }
#endif  // !CAPNP_LITE

            inline  ::int64_t getId() const;

            inline bool getValue() const;

        private:
            ::capnp::_::StructReader _reader;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::List;
            friend class ::capnp::MessageBuilder;
            friend class ::capnp::Orphanage;
    };

    class UNetPacket::DData::Builder
    {
        public:
            typedef DData Builds;

            Builder() = delete;  // Deleted to discourage incorrect usage.
            // You can explicitly initialize to nullptr instead.
            inline Builder(decltype(nullptr)) {}
            inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
            inline operator Reader() const
            {
                return Reader(_builder.asReader());
            }
            inline Reader asReader() const
            {
                return *this;
            }

            inline ::capnp::MessageSize totalSize() const
            {
                return asReader().totalSize();
            }
#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return asReader().toString();
            }
#endif  // !CAPNP_LITE

            inline  ::int64_t getId();
            inline void setId( ::int64_t value);

            inline bool getValue();
            inline void setValue(bool value);

        private:
            ::capnp::_::StructBuilder _builder;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            friend class ::capnp::Orphanage;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
    };

#if !CAPNP_LITE
    class UNetPacket::DData::Pipeline
    {
        public:
            typedef DData Pipelines;

            inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
            inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
                : _typeless(kj::mv(typeless)) {}

        private:
            ::capnp::AnyPointer::Pipeline _typeless;
            friend class ::capnp::PipelineHook;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
    };
#endif  // !CAPNP_LITE

    class UNetPacket::AData::Reader
    {
        public:
            typedef AData Reads;

            Reader() = default;
            inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

            inline ::capnp::MessageSize totalSize() const
            {
                return _reader.totalSize().asPublic();
            }

#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
            }
#endif  // !CAPNP_LITE

            inline  ::int64_t getId() const;

            inline  ::int64_t getValue() const;

        private:
            ::capnp::_::StructReader _reader;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::List;
            friend class ::capnp::MessageBuilder;
            friend class ::capnp::Orphanage;
    };

    class UNetPacket::AData::Builder
    {
        public:
            typedef AData Builds;

            Builder() = delete;  // Deleted to discourage incorrect usage.
            // You can explicitly initialize to nullptr instead.
            inline Builder(decltype(nullptr)) {}
            inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
            inline operator Reader() const
            {
                return Reader(_builder.asReader());
            }
            inline Reader asReader() const
            {
                return *this;
            }

            inline ::capnp::MessageSize totalSize() const
            {
                return asReader().totalSize();
            }
#if !CAPNP_LITE
            inline ::kj::StringTree toString() const
            {
                return asReader().toString();
            }
#endif  // !CAPNP_LITE

            inline  ::int64_t getId();
            inline void setId( ::int64_t value);

            inline  ::int64_t getValue();
            inline void setValue( ::int64_t value);

        private:
            ::capnp::_::StructBuilder _builder;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
            friend class ::capnp::Orphanage;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::_::PointerHelpers;
    };

#if !CAPNP_LITE
    class UNetPacket::AData::Pipeline
    {
        public:
            typedef AData Pipelines;

            inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
            inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
                : _typeless(kj::mv(typeless)) {}

        private:
            ::capnp::AnyPointer::Pipeline _typeless;
            friend class ::capnp::PipelineHook;
            template <typename, ::capnp::Kind>
            friend struct ::capnp::ToDynamic_;
    };
#endif  // !CAPNP_LITE

    // =======================================================================================

    inline  ::uint32_t UNetPacket::Reader::getMagic() const
    {
        return _reader.getDataField< ::uint32_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }

    inline  ::uint32_t UNetPacket::Builder::getMagic()
    {
        return _builder.getDataField< ::uint32_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setMagic( ::uint32_t value)
    {
        _builder.setDataField< ::uint32_t>(
            ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
    }

    inline  ::uint64_t UNetPacket::Reader::getNum() const
    {
        return _reader.getDataField< ::uint64_t>(
                   ::capnp::bounded<1>() * ::capnp::ELEMENTS);
    }

    inline  ::uint64_t UNetPacket::Builder::getNum()
    {
        return _builder.getDataField< ::uint64_t>(
                   ::capnp::bounded<1>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setNum( ::uint64_t value)
    {
        _builder.setDataField< ::uint64_t>(
            ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
    }

    inline  ::int64_t UNetPacket::Reader::getNodeID() const
    {
        return _reader.getDataField< ::int64_t>(
                   ::capnp::bounded<2>() * ::capnp::ELEMENTS);
    }

    inline  ::int64_t UNetPacket::Builder::getNodeID()
    {
        return _builder.getDataField< ::int64_t>(
                   ::capnp::bounded<2>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setNodeID( ::int64_t value)
    {
        _builder.setDataField< ::int64_t>(
            ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
    }

    inline  ::int64_t UNetPacket::Reader::getProcID() const
    {
        return _reader.getDataField< ::int64_t>(
                   ::capnp::bounded<3>() * ::capnp::ELEMENTS);
    }

    inline  ::int64_t UNetPacket::Builder::getProcID()
    {
        return _builder.getDataField< ::int64_t>(
                   ::capnp::bounded<3>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setProcID( ::int64_t value)
    {
        _builder.setDataField< ::int64_t>(
            ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
    }

    inline bool UNetPacket::Reader::hasDdata() const
    {
        return !_reader.getPointerField(
                   ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
    }
    inline bool UNetPacket::Builder::hasDdata()
    {
        return !_builder.getPointerField(
                   ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
    }
    inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Reader UNetPacket::Reader::getDdata() const
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS));
    }
    inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Builder UNetPacket::Builder::getDdata()
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS));
    }
    inline void UNetPacket::Builder::setDdata( ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Reader value)
    {
        ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS), value);
    }
    inline  ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>::Builder UNetPacket::Builder::initDdata(unsigned int size)
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS), size);
    }
    inline void UNetPacket::Builder::adoptDdata(
        ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>&& value)
    {
        ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
    }
    inline ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>> UNetPacket::Builder::disownDdata()
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::DData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
                    ::capnp::bounded<0>() * ::capnp::POINTERS));
    }

    inline  ::uint64_t UNetPacket::Reader::getDnum() const
    {
        return _reader.getDataField< ::uint64_t>(
                   ::capnp::bounded<4>() * ::capnp::ELEMENTS);
    }

    inline  ::uint64_t UNetPacket::Builder::getDnum()
    {
        return _builder.getDataField< ::uint64_t>(
                   ::capnp::bounded<4>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setDnum( ::uint64_t value)
    {
        _builder.setDataField< ::uint64_t>(
            ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
    }

    inline bool UNetPacket::Reader::hasAdata() const
    {
        return !_reader.getPointerField(
                   ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
    }
    inline bool UNetPacket::Builder::hasAdata()
    {
        return !_builder.getPointerField(
                   ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
    }
    inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Reader UNetPacket::Reader::getAdata() const
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS));
    }
    inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Builder UNetPacket::Builder::getAdata()
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS));
    }
    inline void UNetPacket::Builder::setAdata( ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Reader value)
    {
        ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS), value);
    }
    inline  ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>::Builder UNetPacket::Builder::initAdata(unsigned int size)
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS), size);
    }
    inline void UNetPacket::Builder::adoptAdata(
        ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>&& value)
    {
        ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
    }
    inline ::capnp::Orphan< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>> UNetPacket::Builder::disownAdata()
    {
        return ::capnp::_::PointerHelpers< ::capnp::List< ::uniset::UNetPacket::AData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
                    ::capnp::bounded<1>() * ::capnp::POINTERS));
    }

    inline  ::uint64_t UNetPacket::Reader::getAnum() const
    {
        return _reader.getDataField< ::uint64_t>(
                   ::capnp::bounded<5>() * ::capnp::ELEMENTS);
    }

    inline  ::uint64_t UNetPacket::Builder::getAnum()
    {
        return _builder.getDataField< ::uint64_t>(
                   ::capnp::bounded<5>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::Builder::setAnum( ::uint64_t value)
    {
        _builder.setDataField< ::uint64_t>(
            ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
    }

    inline  ::int64_t UNetPacket::DData::Reader::getId() const
    {
        return _reader.getDataField< ::int64_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }

    inline  ::int64_t UNetPacket::DData::Builder::getId()
    {
        return _builder.getDataField< ::int64_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::DData::Builder::setId( ::int64_t value)
    {
        _builder.setDataField< ::int64_t>(
            ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
    }

    inline bool UNetPacket::DData::Reader::getValue() const
    {
        return _reader.getDataField<bool>(
                   ::capnp::bounded<64>() * ::capnp::ELEMENTS);
    }

    inline bool UNetPacket::DData::Builder::getValue()
    {
        return _builder.getDataField<bool>(
                   ::capnp::bounded<64>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::DData::Builder::setValue(bool value)
    {
        _builder.setDataField<bool>(
            ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
    }

    inline  ::int64_t UNetPacket::AData::Reader::getId() const
    {
        return _reader.getDataField< ::int64_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }

    inline  ::int64_t UNetPacket::AData::Builder::getId()
    {
        return _builder.getDataField< ::int64_t>(
                   ::capnp::bounded<0>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::AData::Builder::setId( ::int64_t value)
    {
        _builder.setDataField< ::int64_t>(
            ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
    }

    inline  ::int64_t UNetPacket::AData::Reader::getValue() const
    {
        return _reader.getDataField< ::int64_t>(
                   ::capnp::bounded<1>() * ::capnp::ELEMENTS);
    }

    inline  ::int64_t UNetPacket::AData::Builder::getValue()
    {
        return _builder.getDataField< ::int64_t>(
                   ::capnp::bounded<1>() * ::capnp::ELEMENTS);
    }
    inline void UNetPacket::AData::Builder::setValue( ::int64_t value)
    {
        _builder.setDataField< ::int64_t>(
            ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
    }

}  // namespace

