/*! \page page_Uniset Краткое описание библиотеки libuniset

	- \ref pg_UniSet_Common
	- \ref pg_Uniset_Processes
	- \ref pg_UniSet_Network
	- \ref pg_UniSet_Utilities

\section pg_UniSet_Common Общее описание libuniset

Основной целью библиотеки \b libuniset является предоставление готовых "кубиков", для построения АСУ.
Графически её можно представить так:
\image html libuniset.png

В основу положена технология CORBA (omniORB - реализация AT&T).
Но основе вызовов CORBA построено всё взаимодействие. При этом API библиотеки,
"маскирует" взаимодействие через CORBA и при необходимости
взаимодействие может быть переписано на основе других механизмов.

В библиотеке реализованы наиболее распространённые интерфейсы обмена,
это \b ModbusTCP и \b ModbusRTU. Помимо этого имеется собственный интерфейс \b UNet,
реализующий обмен по протоколу UDP.

Для взаимодействия с базами данных, реализован базовый DBInterface,
на основе которого можно писать интерфейсы для подключения uniset
к различным СУБД. В самой libuniset реализовано взаимодействие с MySQL.

Помимо собственно единого интерфейса, в библиотеке реализованы \b "готовые компоненты"
для построения АСУ. К ним относятся:
- \b SharedMemory - хранение "переменных"
- \b IOControl - работа с картами ввода/вывода
- \b Modbus TCP/RTU slave и master режимы
- \b UNetExchange - взаимодействие по протоколу UDP
- \b LogicProcessor - компонент, позволяющий описывать алгоритмы на основе, логических схем
(записываемых в xml-файле).

\b Готовые \b компоненты - представляют из себя уже законченные программы (процессы),
которые "умеют" взаимодействовать с SharedMemory и позволяют легко
"развёртывать" распределённые системы.

Всё взаимодействие в libuniset построено на понятии "датчик". Это некоторая
"информационная единица", позволяющая процессам взаимодействовать между собой.
При этом создаётся \b "прозрачная сеть" и каждый процесс использующий тот или иной
датчик в своих целях, "не знает" где физически он находиться и одинаково
взаимодействует с локальными и удалёнными датчиками.

Далее будут рассмотрены типичные схемы построения этого взаимодействия на основе \b libuniset.

\section pg_Uniset_Processes Взаимодействие процессов на узле

На рисунке представлено типичное взаимодействие процессов на узле.
\image html uniset-node.png

Центральным элементом системы является \b SharedMemory - это процесс,
осуществляющий хранение состояния всех датчиков. Всё взаимодействие между
процессами осуществляется через него. Помимо этого \b SharedMemory осуществляет
рассылку уведомлений процессам об изменении состояния того или иного датчика.

Все процессы условно можно разделить на два типа \b "активные" и \b "пассивные".

\b Пассивные процессы - это процессы которые большую часть времени "спят" ожидая,
событий изменения датчиков. В основном к таким процессам относятся процессы управления.

\b Активные процессы - это процессы которые постоянно выполняют какую-то работу.
К таким процессам относятся:
- процессы обмена по сети (в данном случае CAN)
- процессы работы с картами ввода/вывода (IOControl)
- процессы обмена с какими-то внешними устройствами (RS485 или ModbusTCP)

Т.к. \a активные процессы тесно взаимодействуют с \b SharedMemory, то для
оптимизации работы (исключения удалённых вызовов процедур через CORBA),
все \a активные процессы запускаются в одном адресном пространстве с SharedMemory
(каждый процесс в отдельном потоке), и работают с \b SM напрямую,
через указатель. Этот \b "объединённый" процесс обычно называется \b SharedMemory2.

Отдельно можно выделить группу "вспомогательных" процессов. На данном рисунке,
к таким относится \b DBServer, обычно запускаемый на графических станция,
где ведётся БД. Его задача, получать уведомления от \b SM по изменении любого
датчика и сохранять эти события в БД. По умолчанию в libuniset реализована
работа с MySQL, но при необходимости можно реализовать взаимодействие с любой СУБД.

\sa \ref page_SharedMemory
\sa \ref page_IOControl

\section pg_UniSet_Network Распределённое взаимодействие (сетевое)

\image html uniset-typical.png

Для обеспечения \b "прозрачности сети" всё взаимодействие построено на
использовании \b SharedMemory \b(SM), хранящей состояние датчиков во \b ВСЕЙ системе.
При этом на каждом узле запускаться своя копия \b SM. "прозрачность" при этом
обеспечивают процессы обмена между узлами по соответствующему протоколу
(на рисунке это CAN и UNET). Узлы \b постоянно обмениваются между собой
датчиками обеспечивая \b "одинаковость" хранимой в SM информации.
Каждый процесс обмена получает от других узлов информацию о находящихся у них датчиков,
и в свою очередь посылает другим узлам информацию о датчиках находящихся у него на узле.

Так же через SM функционирует и процесс ввода/вывода (IOControl). Всё, что считывается с каналов ввода
сохраняется в SM, а состояние "выходов" читается из SM и выводится в каналы вывода.


\section pg_UniSet_Utilities Утилиты входящие в состав libuniset
...

*/
