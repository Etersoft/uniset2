# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyUniSet', [dirname(__file__)])
        except ImportError:
            import _pyUniSet
            return _pyUniSet
        if fp is not None:
            try:
                _mod = imp.load_module('_pyUniSet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyUniSet = swig_import_helper()
    del swig_import_helper
else:
    import _pyUniSet
del version_info

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def uniset_init_params(p, xmlfile):
    return _pyUniSet.uniset_init_params(p, xmlfile)
uniset_init_params = _pyUniSet.uniset_init_params

def uniset_init(argc, argv, xmlfile):
    return _pyUniSet.uniset_init(argc, argv, xmlfile)
uniset_init = _pyUniSet.uniset_init

def getValue(id):
    return _pyUniSet.getValue(id)
getValue = _pyUniSet.getValue

def setValue(*args):
    return _pyUniSet.setValue(*args)
setValue = _pyUniSet.setValue

def getSensorID(name):
    return _pyUniSet.getSensorID(name)
getSensorID = _pyUniSet.getSensorID

def getObjectID(name):
    return _pyUniSet.getObjectID(name)
getObjectID = _pyUniSet.getObjectID

def getShortName(id):
    return _pyUniSet.getShortName(id)
getShortName = _pyUniSet.getShortName

def getName(id):
    return _pyUniSet.getName(id)
getName = _pyUniSet.getName

def getTextName(id):
    return _pyUniSet.getTextName(id)
getTextName = _pyUniSet.getTextName

def getConfFileName():
    return _pyUniSet.getConfFileName()
getConfFileName = _pyUniSet.getConfFileName
class Params:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    max = _pyUniSet.Params_max

    def __init__(self):
        this = _pyUniSet.new_Params()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, s):
        return _pyUniSet.Params_add(self, s)
    __swig_setmethods__["argc"] = _pyUniSet.Params_argc_set
    __swig_getmethods__["argc"] = _pyUniSet.Params_argc_get
    __swig_setmethods__["argv"] = _pyUniSet.Params_argv_set
    __swig_getmethods__["argv"] = _pyUniSet.Params_argv_get
    __swig_getmethods__["inst"] = lambda x: _pyUniSet.Params_inst
    __swig_destroy__ = _pyUniSet.delete_Params
    __del__ = lambda self: None
Params_swigregister = _pyUniSet.Params_swigregister
Params_swigregister(Params)
cvar = _pyUniSet.cvar
DefaultID = cvar.DefaultID
DefaultSupplerID = cvar.DefaultSupplerID

def Params_inst():
    return _pyUniSet.Params_inst()
Params_inst = _pyUniSet.Params_inst

class UException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UException(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UException
    __del__ = lambda self: None

    def getError(self):
        return _pyUniSet.UException_getError(self)
    __swig_setmethods__["err"] = _pyUniSet.UException_err_set
    __swig_getmethods__["err"] = _pyUniSet.UException_err_get
UException_swigregister = _pyUniSet.UException_swigregister
UException_swigregister(UException)

class UTimeOut(UException):
    __swig_setmethods__ = {}
    for _s in [UException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTimeOut, name, value)
    __swig_getmethods__ = {}
    for _s in [UException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UTimeOut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UTimeOut(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UTimeOut
    __del__ = lambda self: None
UTimeOut_swigregister = _pyUniSet.UTimeOut_swigregister
UTimeOut_swigregister(UTimeOut)

class USysError(UException):
    __swig_setmethods__ = {}
    for _s in [UException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USysError, name, value)
    __swig_getmethods__ = {}
    for _s in [UException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USysError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_USysError(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_USysError
    __del__ = lambda self: None
USysError_swigregister = _pyUniSet.USysError_swigregister
USysError_swigregister(USysError)

# This file is compatible with both classic and new-style classes.


