# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg_parts = __name__.rpartition('.')
        pkg = pkg_parts[0] if pkg_parts[1] == '.' else pkg_parts[2]
        mname = '.'.join((pkg, '_UModbus')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UModbus')
    _UModbus = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UModbus', [dirname(__file__)])
        except ImportError:
            import _UModbus
            return _UModbus
        try:
            _mod = imp.load_module('_UModbus', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UModbus = swig_import_helper()
    del swig_import_helper
else:
    raise RuntimeError('Python 2.6 or later required')
del _swig_python_version_info

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class UModbus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UModbus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UModbus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UModbus.new_UModbus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UModbus.delete_UModbus
    __del__ = lambda self: None

    def getUIType(self) -> "std::string":
        return _UModbus.UModbus_getUIType(self)

    def isWriteFunction(self, mbfunc: 'int') -> "bool":
        return _UModbus.UModbus_isWriteFunction(self, mbfunc)

    def prepare(self, ip: 'std::string const &', port: 'int') -> "void":
        return _UModbus.UModbus_prepare(self, ip, port)

    def connect(self, ip: 'std::string const &', port: 'int') -> "void":
        return _UModbus.UModbus_connect(self, ip, port)

    def conn_port(self) -> "int":
        return _UModbus.UModbus_conn_port(self)

    def conn_ip(self) -> "std::string":
        return _UModbus.UModbus_conn_ip(self)

    def isConnection(self) -> "bool":
        return _UModbus.UModbus_isConnection(self)

    def setTimeout(self, msec: 'int') -> "void":
        return _UModbus.UModbus_setTimeout(self, msec)

    def mbread(self, *args) -> "long":
        return _UModbus.UModbus_mbread(self, *args)

    def getWord(self, addr: 'int', mbreg: 'int', mbfunc: 'int'=0x4) -> "long":
        return _UModbus.UModbus_getWord(self, addr, mbreg, mbfunc)

    def getByte(self, addr: 'int', mbreg: 'int', mbfunc: 'int'=0x4) -> "long":
        return _UModbus.UModbus_getByte(self, addr, mbreg, mbfunc)

    def getBit(self, addr: 'int', mbreg: 'int', mbfunc: 'int'=0x2) -> "bool":
        return _UModbus.UModbus_getBit(self, addr, mbreg, mbfunc)

    def mbwrite(self, *args) -> "void":
        return _UModbus.UModbus_mbwrite(self, *args)
UModbus_swigregister = _UModbus.UModbus_swigregister
UModbus_swigregister(UModbus)

# This file is compatible with both classic and new-style classes.


