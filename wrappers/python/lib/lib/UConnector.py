# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg_parts = __name__.rpartition('.')
        pkg = pkg_parts[0] if pkg_parts[1] == '.' else pkg_parts[2]
        mname = '.'.join((pkg, '_UConnector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UConnector')
    _UConnector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UConnector', [dirname(__file__)])
        except ImportError:
            import _UConnector
            return _UConnector
        try:
            _mod = imp.load_module('_UConnector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UConnector = swig_import_helper()
    del swig_import_helper
else:
    raise RuntimeError('Python 2.6 or later required')
del _swig_python_version_info

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    max = _UConnector.Params_max

    def __init__(self):
        this = _UConnector.new_Params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, s: 'char *') -> "bool":
        return _UConnector.Params_add(self, s)

    def add_str(self, s: 'std::string const') -> "bool":
        return _UConnector.Params_add_str(self, s)
    __swig_setmethods__["argc"] = _UConnector.Params_argc_set
    __swig_getmethods__["argc"] = _UConnector.Params_argc_get
    if _newclass:
        argc = property(_UConnector.Params_argc_get, _UConnector.Params_argc_set)
    __swig_setmethods__["argv"] = _UConnector.Params_argv_set
    __swig_getmethods__["argv"] = _UConnector.Params_argv_get
    if _newclass:
        argv = property(_UConnector.Params_argv_get, _UConnector.Params_argv_set)
    if _newclass:
        inst = staticmethod(_UConnector.Params_inst)
    else:
        inst = _UConnector.Params_inst
    __swig_destroy__ = _UConnector.delete_Params
    __del__ = lambda self: None
Params_swigregister = _UConnector.Params_swigregister
Params_swigregister(Params)
cvar = _UConnector.cvar
DefaultID = cvar.DefaultID
DefaultSupplerID = cvar.DefaultSupplerID

def Params_inst() -> "UTypes::Params":
    return _UConnector.Params_inst()
Params_inst = _UConnector.Params_inst

class ShortIOInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortIOInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortIOInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _UConnector.ShortIOInfo_value_set
    __swig_getmethods__["value"] = _UConnector.ShortIOInfo_value_get
    if _newclass:
        value = property(_UConnector.ShortIOInfo_value_get, _UConnector.ShortIOInfo_value_set)
    __swig_setmethods__["tv_sec"] = _UConnector.ShortIOInfo_tv_sec_set
    __swig_getmethods__["tv_sec"] = _UConnector.ShortIOInfo_tv_sec_get
    if _newclass:
        tv_sec = property(_UConnector.ShortIOInfo_tv_sec_get, _UConnector.ShortIOInfo_tv_sec_set)
    __swig_setmethods__["tv_nsec"] = _UConnector.ShortIOInfo_tv_nsec_set
    __swig_getmethods__["tv_nsec"] = _UConnector.ShortIOInfo_tv_nsec_get
    if _newclass:
        tv_nsec = property(_UConnector.ShortIOInfo_tv_nsec_get, _UConnector.ShortIOInfo_tv_nsec_set)
    __swig_setmethods__["supplier"] = _UConnector.ShortIOInfo_supplier_set
    __swig_getmethods__["supplier"] = _UConnector.ShortIOInfo_supplier_get
    if _newclass:
        supplier = property(_UConnector.ShortIOInfo_supplier_get, _UConnector.ShortIOInfo_supplier_set)
    __swig_setmethods__["supplier_node"] = _UConnector.ShortIOInfo_supplier_node_set
    __swig_getmethods__["supplier_node"] = _UConnector.ShortIOInfo_supplier_node_get
    if _newclass:
        supplier_node = property(_UConnector.ShortIOInfo_supplier_node_get, _UConnector.ShortIOInfo_supplier_node_set)

    def __init__(self):
        this = _UConnector.new_ShortIOInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UConnector.delete_ShortIOInfo
    __del__ = lambda self: None
ShortIOInfo_swigregister = _UConnector.ShortIOInfo_swigregister
ShortIOInfo_swigregister(ShortIOInfo)

class UConnector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UConnector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UConnector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _UConnector.new_UConnector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UConnector.delete_UConnector
    __del__ = lambda self: None

    def getUIType(self) -> "std::string":
        return _UConnector.UConnector_getUIType(self)

    def getConfFileName(self) -> "std::string":
        return _UConnector.UConnector_getConfFileName(self)

    def getValue(self, id: 'long', node: 'long') -> "long":
        return _UConnector.UConnector_getValue(self, id, node)

    def setValue(self, *args) -> "void":
        return _UConnector.UConnector_setValue(self, *args)

    def getTimeChange(self, *args) -> "UTypes::ShortIOInfo":
        return _UConnector.UConnector_getTimeChange(self, *args)

    def getSensorID(self, name: 'std::string const &') -> "long":
        return _UConnector.UConnector_getSensorID(self, name)

    def getNodeID(self, name: 'std::string const &') -> "long":
        return _UConnector.UConnector_getNodeID(self, name)

    def getObjectID(self, name: 'std::string const &') -> "long":
        return _UConnector.UConnector_getObjectID(self, name)

    def getShortName(self, id: 'long') -> "std::string":
        return _UConnector.UConnector_getShortName(self, id)

    def getName(self, id: 'long') -> "std::string":
        return _UConnector.UConnector_getName(self, id)

    def getTextName(self, id: 'long') -> "std::string":
        return _UConnector.UConnector_getTextName(self, id)

    def getObjectInfo(self, *args) -> "std::string":
        return _UConnector.UConnector_getObjectInfo(self, *args)

    def apiRequest(self, *args) -> "std::string":
        return _UConnector.UConnector_apiRequest(self, *args)

    def activate_objects(self) -> "void":
        return _UConnector.UConnector_activate_objects(self)
UConnector_swigregister = _UConnector.UConnector_swigregister
UConnector_swigregister(UConnector)

# This file is compatible with both classic and new-style classes.


