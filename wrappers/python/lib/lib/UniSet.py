# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UniSet
else:
    import _UniSet

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def uniset_init_params(p: "Params", xmlfile: "std::string const &") -> "void":
    return _UniSet.uniset_init_params(p, xmlfile)

def uniset_init(argc: "int", argv: "char **", xmlfile: "std::string const &") -> "void":
    return _UniSet.uniset_init(argc, argv, xmlfile)

def uniset_activate_objects() -> "void":
    return _UniSet.uniset_activate_objects()

def getValue(id: "long") -> "long":
    return _UniSet.getValue(id)

def setValue(*args) -> "void":
    return _UniSet.setValue(*args)

def getSensorID(name: "std::string const &") -> "long":
    return _UniSet.getSensorID(name)

def getObjectID(name: "std::string const &") -> "long":
    return _UniSet.getObjectID(name)

def getShortName(id: "long") -> "std::string":
    return _UniSet.getShortName(id)

def getName(id: "long") -> "std::string":
    return _UniSet.getName(id)

def getTextName(id: "long") -> "std::string":
    return _UniSet.getTextName(id)

def getConfFileName() -> "std::string":
    return _UniSet.getConfFileName()
class Params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max = _UniSet.Params_max

    def __init__(self):
        _UniSet.Params_swiginit(self, _UniSet.new_Params())

    def add(self, s: "char *") -> "bool":
        return _UniSet.Params_add(self, s)

    def add_str(self, s: "std::string const") -> "bool":
        return _UniSet.Params_add_str(self, s)
    argc = property(_UniSet.Params_argc_get, _UniSet.Params_argc_set)
    argv = property(_UniSet.Params_argv_get, _UniSet.Params_argv_set)

    @staticmethod
    def inst() -> "UTypes::Params":
        return _UniSet.Params_inst()
    __swig_destroy__ = _UniSet.delete_Params

# Register Params in _UniSet:
_UniSet.Params_swigregister(Params)
cvar = _UniSet.cvar
DefaultID = cvar.DefaultID
DefaultSupplerID = cvar.DefaultSupplerID

def Params_inst() -> "UTypes::Params":
    return _UniSet.Params_inst()

class ShortIOInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_UniSet.ShortIOInfo_value_get, _UniSet.ShortIOInfo_value_set)
    tv_sec = property(_UniSet.ShortIOInfo_tv_sec_get, _UniSet.ShortIOInfo_tv_sec_set)
    tv_nsec = property(_UniSet.ShortIOInfo_tv_nsec_get, _UniSet.ShortIOInfo_tv_nsec_set)
    supplier = property(_UniSet.ShortIOInfo_supplier_get, _UniSet.ShortIOInfo_supplier_set)
    supplier_node = property(_UniSet.ShortIOInfo_supplier_node_get, _UniSet.ShortIOInfo_supplier_node_set)

    def __init__(self):
        _UniSet.ShortIOInfo_swiginit(self, _UniSet.new_ShortIOInfo())
    __swig_destroy__ = _UniSet.delete_ShortIOInfo

# Register ShortIOInfo in _UniSet:
_UniSet.ShortIOInfo_swigregister(ShortIOInfo)

class UException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UniSet.UException_swiginit(self, _UniSet.new_UException(*args))
    __swig_destroy__ = _UniSet.delete_UException

    def getError(self) -> "std::string const":
        return _UniSet.UException_getError(self)
    err = property(_UniSet.UException_err_get, _UniSet.UException_err_set)

# Register UException in _UniSet:
_UniSet.UException_swigregister(UException)

class UTimeOut(UException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UniSet.UTimeOut_swiginit(self, _UniSet.new_UTimeOut(*args))
    __swig_destroy__ = _UniSet.delete_UTimeOut

# Register UTimeOut in _UniSet:
_UniSet.UTimeOut_swigregister(UTimeOut)

class USysError(UException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UniSet.USysError_swiginit(self, _UniSet.new_USysError(*args))
    __swig_destroy__ = _UniSet.delete_USysError

# Register USysError in _UniSet:
_UniSet.USysError_swigregister(USysError)

class UValidateError(UException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UniSet.UValidateError_swiginit(self, _UniSet.new_UValidateError(*args))
    __swig_destroy__ = _UniSet.delete_UValidateError

# Register UValidateError in _UniSet:
_UniSet.UValidateError_swigregister(UValidateError)

class UProxyObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _UniSet.UProxyObject_swiginit(self, _UniSet.new_UProxyObject(*args))
    __swig_destroy__ = _UniSet.delete_UProxyObject

    def addToAsk(self, id: "long") -> "void":
        return _UniSet.UProxyObject_addToAsk(self, id)

    def askSensor(self, id: "long") -> "void":
        return _UniSet.UProxyObject_askSensor(self, id)

    def getValue(self, id: "long") -> "long":
        return _UniSet.UProxyObject_getValue(self, id)

    def getFloatValue(self, id: "long") -> "float":
        return _UniSet.UProxyObject_getFloatValue(self, id)

    def setValue(self, id: "long", val: "long") -> "void":
        return _UniSet.UProxyObject_setValue(self, id, val)

    def askIsOK(self) -> "bool":
        return _UniSet.UProxyObject_askIsOK(self)

    def reaskSensors(self) -> "bool":
        return _UniSet.UProxyObject_reaskSensors(self)

    def updateValues(self) -> "bool":
        return _UniSet.UProxyObject_updateValues(self)

    def smIsOK(self) -> "bool":
        return _UniSet.UProxyObject_smIsOK(self)

# Register UProxyObject in _UniSet:
_UniSet.UProxyObject_swigregister(UProxyObject)



