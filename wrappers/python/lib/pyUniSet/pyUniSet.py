# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg_parts = __name__.rpartition('.')
        pkg = pkg_parts[0] if pkg_parts[1] == '.' else pkg_parts[2]
        mname = '.'.join((pkg, '_pyUniSet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyUniSet')
    _pyUniSet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyUniSet', [dirname(__file__)])
        except ImportError:
            import _pyUniSet
            return _pyUniSet
        try:
            _mod = imp.load_module('_pyUniSet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyUniSet = swig_import_helper()
    del swig_import_helper
else:
    raise RuntimeError('Python 2.6 or later required')
del _swig_python_version_info

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def uniset_init_params(p: 'Params', xmlfile: 'std::string const &') -> "void":
    return _pyUniSet.uniset_init_params(p, xmlfile)
uniset_init_params = _pyUniSet.uniset_init_params

def uniset_init(argc: 'int', argv: 'char **', xmlfile: 'std::string const &') -> "void":
    return _pyUniSet.uniset_init(argc, argv, xmlfile)
uniset_init = _pyUniSet.uniset_init

def uniset_activate_objects() -> "void":
    return _pyUniSet.uniset_activate_objects()
uniset_activate_objects = _pyUniSet.uniset_activate_objects

def getValue(id: 'long') -> "long":
    return _pyUniSet.getValue(id)
getValue = _pyUniSet.getValue

def setValue(*args) -> "void":
    return _pyUniSet.setValue(*args)
setValue = _pyUniSet.setValue

def getSensorID(name: 'std::string const &') -> "long":
    return _pyUniSet.getSensorID(name)
getSensorID = _pyUniSet.getSensorID

def getObjectID(name: 'std::string const &') -> "long":
    return _pyUniSet.getObjectID(name)
getObjectID = _pyUniSet.getObjectID

def getShortName(id: 'long') -> "std::string":
    return _pyUniSet.getShortName(id)
getShortName = _pyUniSet.getShortName

def getName(id: 'long') -> "std::string":
    return _pyUniSet.getName(id)
getName = _pyUniSet.getName

def getTextName(id: 'long') -> "std::string":
    return _pyUniSet.getTextName(id)
getTextName = _pyUniSet.getTextName

def getConfFileName() -> "std::string":
    return _pyUniSet.getConfFileName()
getConfFileName = _pyUniSet.getConfFileName
class Params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Params, name)
    __repr__ = _swig_repr
    max = _pyUniSet.Params_max

    def __init__(self):
        this = _pyUniSet.new_Params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, s: 'char *') -> "bool":
        return _pyUniSet.Params_add(self, s)

    def add_str(self, s: 'std::string const') -> "bool":
        return _pyUniSet.Params_add_str(self, s)
    __swig_setmethods__["argc"] = _pyUniSet.Params_argc_set
    __swig_getmethods__["argc"] = _pyUniSet.Params_argc_get
    if _newclass:
        argc = property(_pyUniSet.Params_argc_get, _pyUniSet.Params_argc_set)
    __swig_setmethods__["argv"] = _pyUniSet.Params_argv_set
    __swig_getmethods__["argv"] = _pyUniSet.Params_argv_get
    if _newclass:
        argv = property(_pyUniSet.Params_argv_get, _pyUniSet.Params_argv_set)
    if _newclass:
        inst = staticmethod(_pyUniSet.Params_inst)
    else:
        inst = _pyUniSet.Params_inst
    __swig_destroy__ = _pyUniSet.delete_Params
    __del__ = lambda self: None
Params_swigregister = _pyUniSet.Params_swigregister
Params_swigregister(Params)
cvar = _pyUniSet.cvar
DefaultID = cvar.DefaultID
DefaultSupplerID = cvar.DefaultSupplerID

def Params_inst() -> "UTypes::Params":
    return _pyUniSet.Params_inst()
Params_inst = _pyUniSet.Params_inst

class ShortIOInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortIOInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortIOInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _pyUniSet.ShortIOInfo_value_set
    __swig_getmethods__["value"] = _pyUniSet.ShortIOInfo_value_get
    if _newclass:
        value = property(_pyUniSet.ShortIOInfo_value_get, _pyUniSet.ShortIOInfo_value_set)
    __swig_setmethods__["tv_sec"] = _pyUniSet.ShortIOInfo_tv_sec_set
    __swig_getmethods__["tv_sec"] = _pyUniSet.ShortIOInfo_tv_sec_get
    if _newclass:
        tv_sec = property(_pyUniSet.ShortIOInfo_tv_sec_get, _pyUniSet.ShortIOInfo_tv_sec_set)
    __swig_setmethods__["tv_nsec"] = _pyUniSet.ShortIOInfo_tv_nsec_set
    __swig_getmethods__["tv_nsec"] = _pyUniSet.ShortIOInfo_tv_nsec_get
    if _newclass:
        tv_nsec = property(_pyUniSet.ShortIOInfo_tv_nsec_get, _pyUniSet.ShortIOInfo_tv_nsec_set)
    __swig_setmethods__["supplier"] = _pyUniSet.ShortIOInfo_supplier_set
    __swig_getmethods__["supplier"] = _pyUniSet.ShortIOInfo_supplier_get
    if _newclass:
        supplier = property(_pyUniSet.ShortIOInfo_supplier_get, _pyUniSet.ShortIOInfo_supplier_set)
    __swig_setmethods__["supplier_node"] = _pyUniSet.ShortIOInfo_supplier_node_set
    __swig_getmethods__["supplier_node"] = _pyUniSet.ShortIOInfo_supplier_node_get
    if _newclass:
        supplier_node = property(_pyUniSet.ShortIOInfo_supplier_node_get, _pyUniSet.ShortIOInfo_supplier_node_set)

    def __init__(self):
        this = _pyUniSet.new_ShortIOInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_ShortIOInfo
    __del__ = lambda self: None
ShortIOInfo_swigregister = _pyUniSet.ShortIOInfo_swigregister
ShortIOInfo_swigregister(ShortIOInfo)

class UException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UException
    __del__ = lambda self: None

    def getError(self) -> "std::string const":
        return _pyUniSet.UException_getError(self)
    __swig_setmethods__["err"] = _pyUniSet.UException_err_set
    __swig_getmethods__["err"] = _pyUniSet.UException_err_get
UException_swigregister = _pyUniSet.UException_swigregister
UException_swigregister(UException)

class UTimeOut(UException):
    __swig_setmethods__ = {}
    for _s in [UException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UTimeOut, name, value)
    __swig_getmethods__ = {}
    for _s in [UException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UTimeOut, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UTimeOut(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UTimeOut
    __del__ = lambda self: None
UTimeOut_swigregister = _pyUniSet.UTimeOut_swigregister
UTimeOut_swigregister(UTimeOut)

class USysError(UException):
    __swig_setmethods__ = {}
    for _s in [UException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, USysError, name, value)
    __swig_getmethods__ = {}
    for _s in [UException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, USysError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_USysError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_USysError
    __del__ = lambda self: None
USysError_swigregister = _pyUniSet.USysError_swigregister
USysError_swigregister(USysError)

class UValidateError(UException):
    __swig_setmethods__ = {}
    for _s in [UException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UValidateError, name, value)
    __swig_getmethods__ = {}
    for _s in [UException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UValidateError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UValidateError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UValidateError
    __del__ = lambda self: None
UValidateError_swigregister = _pyUniSet.UValidateError_swigregister
UValidateError_swigregister(UValidateError)

class UProxyObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UProxyObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UProxyObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyUniSet.new_UProxyObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyUniSet.delete_UProxyObject
    __del__ = lambda self: None

    def addToAsk(self, id: 'long') -> "void":
        return _pyUniSet.UProxyObject_addToAsk(self, id)

    def askSensor(self, id: 'long') -> "void":
        return _pyUniSet.UProxyObject_askSensor(self, id)

    def getValue(self, id: 'long') -> "long":
        return _pyUniSet.UProxyObject_getValue(self, id)

    def getFloatValue(self, id: 'long') -> "float":
        return _pyUniSet.UProxyObject_getFloatValue(self, id)

    def setValue(self, id: 'long', val: 'long') -> "void":
        return _pyUniSet.UProxyObject_setValue(self, id, val)

    def askIsOK(self) -> "bool":
        return _pyUniSet.UProxyObject_askIsOK(self)

    def reaskSensors(self) -> "bool":
        return _pyUniSet.UProxyObject_reaskSensors(self)

    def updateValues(self) -> "bool":
        return _pyUniSet.UProxyObject_updateValues(self)

    def smIsOK(self) -> "bool":
        return _pyUniSet.UProxyObject_smIsOK(self)
UProxyObject_swigregister = _pyUniSet.UProxyObject_swigregister
UProxyObject_swigregister(UProxyObject)

# This file is compatible with both classic and new-style classes.


