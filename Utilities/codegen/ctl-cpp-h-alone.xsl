<?xml version='1.0' encoding="utf-8" ?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version='1.0'
		             xmlns:date="http://exslt.org/dates-and-times">

<xsl:import href="ctl-cpp-common.xsl"/>
<xsl:output method="text" indent="yes" encoding="utf-8"/>

<xsl:variable name="CLASSNAME">
	<xsl:call-template name="settings-alone"><xsl:with-param name="varname" select="'class-name'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="BASECLASS">
	<xsl:call-template name="settings-alone"><xsl:with-param name="varname" select="'base-class'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="OID">
	<xsl:call-template name="settings-alone"><xsl:with-param name="varname" select="'ID'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="TESTMODE">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'testmode'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="ARGPREFIX">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'arg-prefix'"/></xsl:call-template>
</xsl:variable>
<xsl:variable name="SIMPLEPROC">
	<xsl:call-template name="settings"><xsl:with-param name="varname" select="'simple-proc'"/></xsl:call-template>
</xsl:variable>
<!-- Генерирование заголовочного файла -->
<xsl:template match="/">
// --------------------------------------------------------------------------
/*
 DO NOT EDIT THIS FILE. IT IS AUTOGENERATED FILE.
 ALL YOUR CHANGES WILL BE LOST.
 
 НЕ РЕДАКТИРУЙТЕ ЭТОТ ФАЙЛ. ЭТОТ ФАЙЛ СОЗДАН АВТОМАТИЧЕСКИ.
 ВСЕ ВАШИ ИЗМЕНЕНИЯ БУДУТ ПОТЕРЯНЫ.
*/ 
// --------------------------------------------------------------------------
// generate timestamp: <xsl:value-of select="date:date()"/>
// -----------------------------------------------------------------------------
#ifndef <xsl:value-of select="$CLASSNAME"/>_SK_H_
#define <xsl:value-of select="$CLASSNAME"/>_SK_H_
// -----------------------------------------------------------------------------
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;unordered_map&gt;
<xsl:if test="normalize-space($BASECLASS)!=''">#include <xsl:call-template name="preinclude"/><xsl:value-of select="normalize-space($BASECLASS)"/>.h<xsl:call-template name="postinclude"/></xsl:if>
<xsl:if test="normalize-space($BASECLASS)=''">#include <xsl:call-template name="preinclude"/>UniSetObject.h<xsl:call-template name="postinclude"/></xsl:if>
#include <xsl:call-template name="preinclude"/>UniXML.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>Trigger.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>UInterface.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>LogServer.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>DebugStream.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>LogAgregator.h<xsl:call-template name="postinclude"/>
#include <xsl:call-template name="preinclude"/>VMonitor.h<xsl:call-template name="postinclude"/>
// -----------------------------------------------------------------------------
class <xsl:value-of select="$CLASSNAME"/>_SK:
<xsl:choose>
	<xsl:when test="normalize-space($BASECLASS)='UniSetObject'">	public uniset::UniSetObject</xsl:when>
	<xsl:when test="normalize-space($BASECLASS)='UniSetManager'">	public uniset::UniSetManager</xsl:when>
	<xsl:when test="normalize-space($BASECLASS)!=''">	public <xsl:value-of select="normalize-space($BASECLASS)"/></xsl:when>
	<xsl:when test="normalize-space($BASECLASS)=''">	public uniset::UniSetObject</xsl:when>
</xsl:choose>
{
	public:
		<xsl:if test="not(normalize-space($OID))=''">
				<xsl:value-of select="$CLASSNAME"/>_SK( uniset::ObjectId id = uniset::uniset_conf()->getObjectID("<xsl:value-of select="$OID"/>"), xmlNode* node=uniset::uniset_conf()->getNode("<xsl:value-of select="normalize-space($OID)"/>"), const std::string&amp; argprefix="", xmlNode* globalConfNode=nullptr );
		</xsl:if>
		<xsl:if test="normalize-space($OID)=''">
				<xsl:value-of select="$CLASSNAME"/>_SK( uniset::ObjectId id, xmlNode* node=uniset::uniset_conf()->getNode("<xsl:value-of select="normalize-space($OID)"/>"), xmlNode* globalConfNode=nullptr );
		</xsl:if>
		<xsl:value-of select="$CLASSNAME"/>_SK();

		virtual ~<xsl:value-of select="$CLASSNAME"/>_SK();

		<xsl:call-template name="COMMON-HEAD-PUBLIC"/>
<xsl:if test="normalize-space($SIMPLEPROC)=''">
		// Используемые идентификаторы
		<xsl:for-each select="//sensors/item">
			<xsl:call-template name="setvar">
				<xsl:with-param name="GENTYPE" select="'H'"/>
			</xsl:call-template>
		</xsl:for-each>

		// Используемые идентификаторы сообщений
		<xsl:for-each select="//sensors/item">
			<xsl:call-template name="setmsg">
				<xsl:with-param name="GENTYPE" select="'H'"/>
			</xsl:call-template>
		</xsl:for-each>
</xsl:if>
	protected:
		<xsl:call-template name="COMMON-HEAD-PROTECTED"/>
		
	private:
		<xsl:call-template name="COMMON-HEAD-PRIVATE"/>
<xsl:if test="normalize-space($SIMPLEPROC)=''">
		// Используемые идентификаторы
		<xsl:for-each select="//sensors/item">
			<xsl:call-template name="setvar">
				<xsl:with-param name="GENTYPE" select="'H-PRIVATE'"/>
			</xsl:call-template>
		</xsl:for-each>

		// Используемые идентификаторы сообщений
		<xsl:for-each select="//sensors/item">
			<xsl:call-template name="setmsg">
				<xsl:with-param name="GENTYPE" select="'H-PRIVATE'"/>
			</xsl:call-template>
		</xsl:for-each>
</xsl:if>
};

// -----------------------------------------------------------------------------
#endif // <xsl:value-of select="$CLASSNAME"/>_SK_H_
</xsl:template>
</xsl:stylesheet>
